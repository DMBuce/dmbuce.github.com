I"˚$<p>In a recent article, I showed how to
<a href="http://localhost:4000/blog/2019/11/22/bash-output-patterns#duplicate-all-output-to-a-log-file">print a script‚Äôs output to both a log file and stdout</a>.
Some of you might be wondering why I used a <code class="language-plaintext highlighter-rouge">{ group command; }</code> piped into <code class="language-plaintext highlighter-rouge">tee</code> for this,
rather than <code class="language-plaintext highlighter-rouge">&gt;(process substition)</code>. Let me explain.</p>

<p>The solution I offered in that post has a downside in that it redirects stderr to stdout.
<a href="https://stackoverflow.com/a/11886837">This StackOverflow answer</a>
tries to get around that limitation by using separate <code class="language-plaintext highlighter-rouge">tee</code> processes to handle stdout and stderr,
but it introduces a new problem.
Let‚Äôs see what happens when we run their example script:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>^_^ woody@beemo:~$ myscript 
^_^ woody@beemo:~$ foo
bar
</code></pre></div></div>

<p>It might look like I typed <code class="language-plaintext highlighter-rouge">foo</code> into the terminal above,
but what actually happened is <code class="language-plaintext highlighter-rouge">myscript</code> exited,
the shell printed <code class="language-plaintext highlighter-rouge">$PS1</code> to indicate it was ready for me to type another command on stdin,
then the first <code class="language-plaintext highlighter-rouge">tee</code> process from <code class="language-plaintext highlighter-rouge">myscript</code> printed the string ‚Äúfoo‚Äù on stdout after the prompt,
and finally the second <code class="language-plaintext highlighter-rouge">tee</code> process printed ‚Äúbar‚Äù on stderr on the next line.
This is because commands inside the <code class="language-plaintext highlighter-rouge">&gt;( )</code> of a process substition run asynchronously,
so there‚Äôs no guarantee that our script will exit after the <code class="language-plaintext highlighter-rouge">tee</code> processes print their output.
Either event could happen first.
It‚Äôs a classic race condition.</p>

<p>We can use information from
<a href="https://unix.stackexchange.com/a/524844">another StackOverflow answer</a>
to address the race condition by forcing the script to wait for the <code class="language-plaintext highlighter-rouge">tee</code> processes to end.
Here‚Äôs what that looks like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># global vars</span>
<span class="nv">prog</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">0</span><span class="p">##*/</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">syncfifo</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">TMPDIR</span><span class="p">-/tmp</span><span class="k">}</span><span class="s2">/</span><span class="nv">$prog</span><span class="s2">.pipe"</span>

<span class="c"># create fifo</span>
<span class="nb">mkfifo</span> <span class="s2">"</span><span class="nv">$syncfifo</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">exit </span>1
<span class="nb">trap</span> <span class="s2">"rm '</span><span class="nv">$syncfifo</span><span class="s2">'"</span> EXIT

<span class="c"># output to stdout and log file</span>
<span class="nb">exec</span>  <span class="o">&gt;</span> <span class="o">&gt;(</span><span class="nb">tee</span> <span class="nt">-ia</span> <span class="s2">"</span><span class="nv">$prog</span><span class="s2">.log"</span><span class="p">;</span>     <span class="nb">echo</span> <span class="o">&gt;</span><span class="s2">"</span><span class="nv">$syncfifo</span><span class="s2">"</span><span class="o">)</span>
<span class="nb">exec </span>2&gt; <span class="o">&gt;(</span><span class="nb">tee</span> <span class="nt">-ia</span> <span class="s2">"</span><span class="nv">$prog</span><span class="s2">.log"</span> <span class="o">&gt;</span>&amp;2<span class="p">;</span> <span class="nb">echo</span> <span class="o">&gt;</span><span class="s2">"</span><span class="nv">$syncfifo</span><span class="s2">"</span><span class="o">)</span>

<span class="c"># your script here</span>
<span class="nb">echo </span>foo
<span class="nb">echo </span>bar <span class="o">&gt;</span>&amp;2

<span class="c"># close stdout and stderr so that the tee processes will exit</span>
<span class="nb">exec</span> <span class="o">&gt;</span>&amp;-
<span class="nb">exec </span>2&gt;&amp;-

<span class="c"># wait for tee to exit</span>
<span class="nb">read </span>line &lt; <span class="s2">"</span><span class="nv">$syncfifo</span><span class="s2">"</span>
<span class="nb">read </span>line &lt; <span class="s2">"</span><span class="nv">$syncfifo</span><span class="s2">"</span>
</code></pre></div></div>

<p>Seems pretty complicated, but if it works it works, right?
Unfortunately, if you run this script enough times, you‚Äôll see output like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>^_^ woody@beemo:~$ myscript 
foo
bar
^_^ woody@beemo:~$ myscript 
bar
foo
^_^ woody@beemo:~$ myscript 
foo
bar
^_^ woody@beemo:~$ 
</code></pre></div></div>

<p>Here we‚Äôve exposed another problem.
In addition to the race condition between our script and the <code class="language-plaintext highlighter-rouge">tee</code> processes,
there‚Äôs also a race condition between the two <code class="language-plaintext highlighter-rouge">tee</code> process substitutions,
so sometimes it prints <code class="language-plaintext highlighter-rouge">"foo\nbar"</code> and other times it prints <code class="language-plaintext highlighter-rouge">"bar\nfoo"</code>.</p>

<p><a href="https://stackoverflow.com/a/3403786">The accepted answer</a> from the first SO link only uses one <code class="language-plaintext highlighter-rouge">tee</code> process,
so it doesn‚Äôt have that problem.
But it <em>does</em> have the same race condition between the script and <code class="language-plaintext highlighter-rouge">tee</code> that we discussed before.
We can solve that problem similarly to how we solved it above for the script with two <code class="language-plaintext highlighter-rouge">tee</code> processes, like so:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># global vars</span>
<span class="nv">prog</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">0</span><span class="p">##*/</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">syncfifo</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">TMPDIR</span><span class="p">-/tmp</span><span class="k">}</span><span class="s2">/</span><span class="nv">$prog</span><span class="s2">.pipe"</span>

<span class="c"># create fifo</span>
<span class="nb">mkfifo</span> <span class="s2">"</span><span class="nv">$syncfifo</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">exit </span>1
<span class="nb">trap</span> <span class="s2">"rm '</span><span class="nv">$syncfifo</span><span class="s2">'"</span> EXIT

<span class="c"># output to stdout and log file</span>
<span class="nb">exec</span> &amp;&gt; <span class="o">&gt;(</span><span class="nb">tee</span> <span class="nt">-ia</span> <span class="s2">"</span><span class="nv">$prog</span><span class="s2">.log"</span><span class="p">;</span> <span class="nb">echo</span> <span class="o">&gt;</span><span class="s2">"</span><span class="nv">$syncfifo</span><span class="s2">"</span><span class="o">)</span>

<span class="c"># your script here</span>
<span class="nb">echo </span>foo
<span class="nb">echo </span>bar <span class="o">&gt;</span>&amp;2

<span class="c"># close stdout and stderr so that the tee process will exit</span>
<span class="nb">exec</span> <span class="o">&gt;</span>&amp;-
<span class="nb">exec </span>2&gt;&amp;-

<span class="c"># wait for tee to exit</span>
<span class="nb">read </span>line &lt; <span class="s2">"</span><span class="nv">$syncfifo</span><span class="s2">"</span>
</code></pre></div></div>

<p>But ultimately, that solution adds a lot of complexity to our script and no benefit compared to just doing this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="c"># global vars</span>
<span class="nv">prog</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">0</span><span class="p">##*/</span><span class="k">}</span><span class="s2">"</span>

<span class="o">{</span>

<span class="c"># your script here</span>
<span class="nb">echo </span>foo
<span class="nb">echo </span>bar <span class="o">&gt;</span>&amp;2

<span class="o">}</span> 2&gt;&amp;1 | <span class="nb">tee</span> <span class="nt">-a</span> <span class="s2">"prog.log"</span>
</code></pre></div></div>

<p>So that‚Äôs my preferred solution for duplicating a script‚Äôs output to a log file.</p>

<!--
### Footnotes

[^1]: Credit goes to <user> for <whatever reasons>.
-->

:ET