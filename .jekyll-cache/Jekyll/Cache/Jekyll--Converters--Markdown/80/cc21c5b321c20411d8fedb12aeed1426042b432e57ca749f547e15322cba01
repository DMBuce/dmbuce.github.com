I"t <p>Let’s look at a few more patterns that a <code class="language-plaintext highlighter-rouge">bash</code> shell script can use.
I’ll show how a script can drop its own privileges, run with a lower priority,
obtain a lock file<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote">1</a></sup>, and create a temp file.</p>

<ol id="markdown-toc">
  <li><a href="#drop-privileges" id="markdown-toc-drop-privileges">Drop Privileges</a></li>
  <li><a href="#create-a-temp-file" id="markdown-toc-create-a-temp-file">Create a Temp File</a></li>
  <li><a href="#run-with-a-lower-priority" id="markdown-toc-run-with-a-lower-priority">Run With a Lower Priority</a></li>
  <li><a href="#generate-a-seeded-random-number" id="markdown-toc-generate-a-seeded-random-number">Generate a Seeded Random Number</a></li>
  <li><a href="#footnotes" id="markdown-toc-footnotes">Footnotes</a></li>
</ol>

<h3 id="drop-privileges">Drop Privileges</h3>

<p>Occasionally you might write a script that needs to run as a particular user.
Rather than having to remember to use <code class="language-plaintext highlighter-rouge">su</code> to switch to that user or <code class="language-plaintext highlighter-rouge">sudo -u $user</code> to run the script as that user,
you can do the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># global vars</span>
<span class="nv">prog</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">0</span><span class="p">##*/</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># prints an error message to stderr</span>
err<span class="o">()</span> <span class="o">{</span>
	<span class="nb">local </span><span class="nv">message</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
	<span class="nb">shift
	printf</span> <span class="s2">"</span><span class="nv">$message</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># drop privileges</span>
<span class="nv">user</span><span class="o">=</span>nobody
<span class="k">if</span> <span class="o">((</span> EUID <span class="o">==</span> 0 <span class="o">))</span><span class="p">;</span> <span class="k">then
	</span><span class="nb">exec </span>runuser <span class="nt">-u</span> <span class="s2">"</span><span class="nv">$user</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$0</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
	<span class="c"># or if runuser isn't available on your system:</span>
	<span class="c">#exec su "$user" -c "$(printf %q "$0") $(printf %q "$*")"</span>
<span class="k">elif</span> <span class="o">[[</span> <span class="si">$(</span><span class="nb">id</span> <span class="nt">-un</span><span class="si">)</span> <span class="o">!=</span> <span class="s2">"</span><span class="nv">$user</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
	</span>err <span class="s2">"This script must be run as %s or %s"</span> <span class="s1">'root'</span> <span class="s2">"</span><span class="nv">$user</span><span class="s2">"</span>
	<span class="nb">exit </span>1
<span class="k">fi</span>
</code></pre></div></div>

<p>Now you can run the script from a root shell or with <code class="language-plaintext highlighter-rouge">sudo</code>,
safe in the knowledge that it will only run as the <code class="language-plaintext highlighter-rouge">nobody</code> user.</p>

<!--
### Obtain a Lock File

If you want to ensure that multiple instances of the same script can't run at the same time,
you can use the following to make each instance of a script try to obtain a lock file.
Only the first one to obtain the lock will continue running.
The others will exit.

Note that I'm using `$prog` and `err()` from the previous example without declaring them as I did in the previous example.
For the rest of this article, I'll assume that `$prog` and `err()` have already been declared.

```bash
# try to obtain lock
lockfile="${TMPDIR-/tmp}/$prog.lock"
if (set -o noclobber && echo $$>"$lockfile") 2>/dev/null; then
	trap "rm -f '$lockfile'" EXIT
else
	err "Lock %s held by pid %s" "$lockfile" "$(<"$lockfile")"
	exit 1
fi
```
-->

<h3 id="create-a-temp-file">Create a Temp File</h3>

<p>The <a href="https://www.owasp.org/index.php/Insecure_Temporary_File">pitfalls involved in creating a temporary file</a> are well-known.
To safely create a temp file, use <code class="language-plaintext highlighter-rouge">mktemp</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># create a temporary file</span>
<span class="nb">trap</span> <span class="s2">"rm -f '</span><span class="nv">$tmpfile</span><span class="s2">'"</span> EXIT
<span class="nv">tmpfile</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">mktemp</span> <span class="nt">--tmpdir</span> <span class="s2">"</span><span class="nv">$prog</span><span class="s2">.XXXXXXXXXX"</span><span class="si">)</span><span class="s2">"</span> <span class="o">||</span> <span class="nb">exit </span>1
</code></pre></div></div>

<p>This will atomically create a new temporary file in a directory defined by the <code class="language-plaintext highlighter-rouge">$TMPDIR</code> environment variable if it’s defined,
or <code class="language-plaintext highlighter-rouge">/tmp</code> if it’s not.</p>

<h3 id="run-with-a-lower-priority">Run With a Lower Priority</h3>

<p>If you have a script that uses a lot of CPU,
you can set its niceness with <code class="language-plaintext highlighter-rouge">renice</code>.
Higher niceness values give a process lower scheduling priority.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># change niceness of this script</span>
renice 10 <span class="nt">-p</span> <span class="nv">$$</span>
</code></pre></div></div>

<h3 id="generate-a-seeded-random-number">Generate a Seeded Random Number</h3>

<p>Suppose you have a script that runs daily from cron,
and it needs to perform some cleanup task once per week.
If you wanted the task to happen on a day that varies from system to system, you could do</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># clean up once per week</span>
<span class="nv">RANDOM</span><span class="o">=</span><span class="k">$((</span> <span class="m">16</span><span class="c">#$(hostname -f | md5sum | cut -c1-4) ))</span>
<span class="nv">cleanup_day</span><span class="o">=</span><span class="si">$(</span>RANDOM % 7<span class="si">)</span>
<span class="k">if</span> <span class="o">((</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> +%u<span class="si">)</span><span class="s2">"</span> <span class="o">==</span> <span class="s2">"</span><span class="nv">$cleanup_day</span><span class="s2">"</span> <span class="k">))</span><span class="p">;</span> <span class="k">then</span>
	<span class="c"># do cleanup task</span>
<span class="k">fi</span>
</code></pre></div></div>

<p>Note that this is only a pathological example meant to demonstrate the technique.
It would be simpler to schedule the cleanup task as a separate cron job in this scenario.
But if, for example, you needed to schedule such a cron job from a configuration management system,
you could use this technique to generate the day of the week
(or the day of the month, the hour, the minute, etc.) to schedule it on.</p>

<h3 id="footnotes">Footnotes</h3>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>I’ve removed the section about lock files after reddit user /u/vogelke <a href="https://www.reddit.com/r/commandline/comments/e1h4f0/is_stuff_like_this_useful/f8r4okk/?context=10">raised some concerns</a> about it. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET