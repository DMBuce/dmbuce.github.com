I"š<p>Commands are the basic building blocks of a <code class="language-plaintext highlighter-rouge">bash</code> script,
and many commands run as an operating system process.
Letâ€™s go over how they work and some of the ways we can interact with them from a shell.</p>

<p>I know this is going to seem incredibly basic to a lot of you,
but I recently had a conversation with a friend who,
despite being familiar with processes as viewed in Windows Task Manager,
was a bit fuzzy about how the shell launches and interacts with them.
This article is for people like him who are new to interacting with processes in a *nix environment.</p>

<ol id="markdown-toc">
  <li><a href="#topics" id="markdown-toc-topics">Topics</a></li>
</ol>

<h3 id="topics">Topics</h3>

<ul>
  <li>what is a process
    <ul>
      <li>identified by a pid</li>
      <li>top, ps, pidof, pgrep, pstree</li>
    </ul>
  </li>
  <li>what is not a process
    <ul>
      <li>keywords, builtins, functions, aliases kinda</li>
    </ul>
  </li>
  <li>arguments
    <ul>
      <li>main() injection point</li>
      <li>options, files</li>
    </ul>
  </li>
  <li>environment variables
    <ul>
      <li>child processes</li>
    </ul>
  </li>
  <li>stdin, stdout, stderr</li>
  <li>exit status</li>
  <li>signals</li>
  <li>other ipc: sockets, FIFOs, shared memory, message buses</li>
</ul>

<!--
### Footnotes

[^1]: Credit goes to <user> for <whatever reasons>.
-->

:ET