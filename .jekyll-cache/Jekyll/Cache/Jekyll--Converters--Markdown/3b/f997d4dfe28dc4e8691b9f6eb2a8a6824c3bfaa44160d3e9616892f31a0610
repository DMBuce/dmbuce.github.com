I"´5<p>I recently wrote a script called
<a href="https://github.com/natewoodward/code-snippets/tree/master/check-mk"><code class="language-plaintext highlighter-rouge">check_jvm_memory</code></a>
to monitor JVM memory usage with <code class="language-plaintext highlighter-rouge">jstat</code> and Check MK.
Letâ€™s go over how to use it.</p>

<ol id="markdown-toc">
  <li><a href="#requirements" id="markdown-toc-requirements">Requirements</a></li>
  <li><a href="#quick-setup" id="markdown-toc-quick-setup">Quick Setup</a></li>
  <li><a href="#install" id="markdown-toc-install">Install</a></li>
  <li><a href="#configure" id="markdown-toc-configure">Configure</a>    <ol>
      <li><a href="#name" id="markdown-toc-name">Name</a></li>
      <li><a href="#pidcommand" id="markdown-toc-pidcommand">PidCommand</a></li>
      <li><a href="#threshold" id="markdown-toc-threshold">Threshold</a></li>
      <li><a href="#label" id="markdown-toc-label">Label</a></li>
    </ol>
  </li>
</ol>

<h3 id="requirements">Requirements</h3>

<p>The script runs as a <a href="https://checkmk.com/cms_localchecks.html">local check</a>,
so it requires the Check MK agent.</p>

<p>For obvious reasons, it requires that you have a running Java process that you want to monitor.</p>

<p>It requires <code class="language-plaintext highlighter-rouge">pidof</code> unless you configure the <a href="#pidcommand"><code class="language-plaintext highlighter-rouge">PidCommand</code></a> option.</p>

<p>It also requires <code class="language-plaintext highlighter-rouge">perl</code>,
and a version of <code class="language-plaintext highlighter-rouge">jstat</code> thatâ€™s compatible with the Java process youâ€™re monitoring.</p>

<h3 id="quick-setup">Quick Setup</h3>

<p>Grab
<a href="https://raw.githubusercontent.com/natewoodward/code-snippets/master/check-mk/check_jvm_memory"><code class="language-plaintext highlighter-rouge">check_jvm_memory</code></a>
from GitHub and drop it in the
<a href="https://checkmk.com/cms_localchecks.html#folder">Check MK script directory</a>
on the host you want to monitor.
The path to the script directory varies depending on how the Check MK agent was set up.
On my systems, itâ€™s <code class="language-plaintext highlighter-rouge">/usr/share/check-mk-agent/local</code>.</p>

<p>If everythingâ€™s set up right,
running the script should give you output that starts with a <code class="language-plaintext highlighter-rouge">P</code>, similar to this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>P JVM_MEMORY.SurvivorSpace1 SurvivorSpace1=0.000000% SurvivorSpace1 0.0% (0.00 / 25.56 MB)
P JVM_MEMORY.OldGen OldGen=26.603203% OldGen 26.6% (340.52 / 1280.00 MB)
P JVM_MEMORY.SurvivorSpace0 SurvivorSpace0=1.325642% SurvivorSpace0 1.3% (0.34 / 25.56 MB)
P JVM_MEMORY.EdenSpace EdenSpace=13.898290% EdenSpace 13.9% (28.47 / 204.88 MB)
P JVM_MEMORY.MetaSpace MetaSpace=98.491438% MetaSpace 98.5% (249.63 / 253.45 MB)
P JVM_MEMORY.CompressedClassSpace CompressedClassSpace=98.215967% CompressedClassSpace 98.2% (32.61 / 33.20 MB)
</code></pre></div></div>

<p>Once Check MK inventories the host,
you should be able to add the new service checks through WATO in the usual way.</p>

<h3 id="install">Install</h3>

<p>I prefer to install the script to <code class="language-plaintext highlighter-rouge">/usr/local/bin/check_jvm_memory</code>,
then symlink it from the Check MK script directory using a name to indicate the service it checks.
For example, to monitor Tomcat I symlink the script from <code class="language-plaintext highlighter-rouge">/usr/share/check-mk-agent/local/300/check_tomcat_memory</code>.
Using the <code class="language-plaintext highlighter-rouge">300</code> subdirectory causes Check MK to run the script every 300 seconds (5 minutes),
and the <code class="language-plaintext highlighter-rouge">check_tomcat_memory</code> filename makes the script produce this output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>P TOMCAT_MEMORY.SurvivorSpace1 SurvivorSpace1=0.000000% SurvivorSpace1 0.0% (0.00 / 25.56 MB)
P TOMCAT_MEMORY.OldGen OldGen=26.603203% OldGen 26.6% (340.52 / 1280.00 MB)
P TOMCAT_MEMORY.SurvivorSpace0 SurvivorSpace0=1.325642% SurvivorSpace0 1.3% (0.34 / 25.56 MB)
P TOMCAT_MEMORY.EdenSpace EdenSpace=25.776531% EdenSpace 25.8% (52.81 / 204.88 MB)
P TOMCAT_MEMORY.MetaSpace MetaSpace=98.491438% MetaSpace 98.5% (249.63 / 253.45 MB)
P TOMCAT_MEMORY.CompressedClassSpace CompressedClassSpace=98.215967% CompressedClassSpace 98.2% (32.61 / 33.20 MB)
</code></pre></div></div>

<p>Since the script is called as <code class="language-plaintext highlighter-rouge">check_tomcat_memory</code> and not <code class="language-plaintext highlighter-rouge">check_jvm_memory</code>,
the service check names start with <code class="language-plaintext highlighter-rouge">TOMCAT_MEMORY</code> instead of <code class="language-plaintext highlighter-rouge">JVM_MEMORY</code>.
This behavior can be overriden by creating a configuration file at
<code class="language-plaintext highlighter-rouge">/etc/check-mk-agent/check_tomcat_memory.cfg</code>,
and including the <a href="#name"><code class="language-plaintext highlighter-rouge">Name</code></a> option described below.</p>

<p>I recommend setting a <a href="#pidcommand"><code class="language-plaintext highlighter-rouge">PidCommand</code></a> in the configuration so that the script will always find the correct Java process to monitor if there are multiple Java processes running on the system.
You might also want to configure warning and critical thresholds for OldGen as described in the <a href="#threshold"><code class="language-plaintext highlighter-rouge">Threshold</code></a> section,
and for PermGen as well on Java 7 and under.</p>

<h3 id="configure">Configure</h3>

<p><code class="language-plaintext highlighter-rouge">check_jvm_memory</code> looks for its configuration in the <code class="language-plaintext highlighter-rouge">/etc/check-mk-agent</code> directory.
The name of the config file is the name of the script plus a <code class="language-plaintext highlighter-rouge">.cfg</code> extension.
Thereâ€™s an example
<a href="https://raw.githubusercontent.com/natewoodward/code-snippets/master/check-mk/check_jvm_memory.cfg"><code class="language-plaintext highlighter-rouge">check_jvm_memory.cfg</code></a>
on GitHub.</p>

<p>Configuration options are described below.</p>

<h4 id="name">Name</h4>

<p>This lets you set a service check name thatâ€™s not derived from the scriptâ€™s filename.
For instance, hereâ€™s the scriptâ€™s output with <code class="language-plaintext highlighter-rouge">Name: TomcatMemory</code> set:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>P TomcatMemory.SurvivorSpace1 SurvivorSpace1=0.000000% SurvivorSpace1 0.0% (0.00 / 25.56 MB)
P TomcatMemory.OldGen OldGen=26.603203% OldGen 26.6% (340.52 / 1280.00 MB)
P TomcatMemory.SurvivorSpace0 SurvivorSpace0=1.325642% SurvivorSpace0 1.3% (0.34 / 25.56 MB)
P TomcatMemory.EdenSpace EdenSpace=45.458359% EdenSpace 45.5% (93.13 / 204.88 MB)
P TomcatMemory.MetaSpace MetaSpace=98.491438% MetaSpace 98.5% (249.63 / 253.45 MB)
P TomcatMemory.CompressedClassSpace CompressedClassSpace=98.215967% CompressedClassSpace 98.2% (32.61 / 33.20 MB)
</code></pre></div></div>

<p>Note that <code class="language-plaintext highlighter-rouge">Name</code> canâ€™t contain spaces, or else Check MK wonâ€™t be able to parse the scriptâ€™s output.</p>

<h4 id="pidcommand">PidCommand</h4>

<p><code class="language-plaintext highlighter-rouge">check_jvm_memory</code> locates the process ID (pid) of the Java process itâ€™s monitoring using a command specified by the <code class="language-plaintext highlighter-rouge">PidCommand</code> option.
<code class="language-plaintext highlighter-rouge">check_jvm_memory</code> will look at the first line of output from this command,
find the first integer, and use that as the pid to pass to <code class="language-plaintext highlighter-rouge">jstat</code>.</p>

<p>The default <code class="language-plaintext highlighter-rouge">PidCommand</code> is <code class="language-plaintext highlighter-rouge">pidof java</code>.</p>

<p>This option is especially useful on systems that have multiple Java processes running on them.
On such systems, you can monitor each process with a differently-named <code class="language-plaintext highlighter-rouge">check_jvm_memory</code> script,
then configure a different <code class="language-plaintext highlighter-rouge">PidCommand</code> for each of those scripts.</p>

<p>Here are a few example commands you could use with this configuration option.
In every case, the script would monitor process ID <code class="language-plaintext highlighter-rouge">9170</code> since thatâ€™s the first integer on the first line of output.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>root@beemo:~# pidof java
9170 4978 4443
root@beemo:~# service tomcat status
tomcat (pid 9170) is running...                            [  OK  ]
root@beemo:~# cat /var/run/tomcat.pid
9170
</code></pre></div></div>

<h4 id="threshold">Threshold</h4>

<p>This option is used to set the threshold for each service check.
The value you set is used as the <code class="language-plaintext highlighter-rouge">;warn;crit;min;max</code> values for
<a href="https://checkmk.com/cms_localchecks.html#perfdata">Check MKâ€™s metrics</a>.
Read Check MKâ€™s documentation for a complete description of how metrics work.</p>

<p>To explain by way of example, suppose you want Check MK to put the OldGen and PermGen service checks into Warning state if they go over 98%,
and Critical state if they go over 99%.
You can do that by configuring these thresholds:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Threshold OldGen:  ;98;99
Threshold PermGen: ;98;99
</code></pre></div></div>

<h4 id="label">Label</h4>

<p>The <code class="language-plaintext highlighter-rouge">Label</code> config option lets you set a label thatâ€™s used in the service name, metrics (a.k.a. perfdata), and status detail (a.k.a. description) of the checkâ€™s output.
Most people wonâ€™t ever need to use this configuration option.</p>

<p>The <code class="language-plaintext highlighter-rouge">Label</code> option is best explained by describing how <code class="language-plaintext highlighter-rouge">check_jvm_memory</code> does its thing.
Internally, it gets its data using a <code class="language-plaintext highlighter-rouge">jstat</code> command similar to the one shown below.
The output is a bit confusing, but to use a couple examples,
the <code class="language-plaintext highlighter-rouge">S0U</code> here indicates how much of <strong>S</strong>urvivor Space #<strong>0</strong> is <strong>U</strong>sed (in KB).
Similarly, <code class="language-plaintext highlighter-rouge">S0C</code> is <strong>S</strong>urvivor Space #<strong>0</strong>â€™s total <strong>C</strong>apacity.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>woody@beemo:~# jstat -gc 9170
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT
26176.0 26176.0 347.0   0.0   209792.0 178909.4 1310720.0   348693.5  259532.0 255616.8 33996.0 33389.5     84    3.658   5      2.046    5.703
</code></pre></div></div>

<p>After parsing that data, <code class="language-plaintext highlighter-rouge">check_jvm_memory</code> looks at every field header ending with a <code class="language-plaintext highlighter-rouge">U</code>,
looks up the matching header that ends in <code class="language-plaintext highlighter-rouge">C</code>,
and uses the two values for those columns to compute the percent usage of that area of memory.</p>

<p>If there were no labels set,
the script would report that <code class="language-plaintext highlighter-rouge">S0</code> has a usage of <code class="language-plaintext highlighter-rouge">1.33%</code> in the example above,
which isnâ€™t very helpful â€“ what the heck is <code class="language-plaintext highlighter-rouge">S0</code>?
To make the output more human friendly,
you can configure a label for <code class="language-plaintext highlighter-rouge">S0</code> so that the script reports <code class="language-plaintext highlighter-rouge">1.33%</code> usage for <code class="language-plaintext highlighter-rouge">SurvivorSpace0</code> instead:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Label S0:  SurvivorSpace0
</code></pre></div></div>

<p>Internally, the script has default labels for every area of memory in Java 7 and Java 8,
so you shouldnâ€™t need to configure any labels.
But if you donâ€™t like the labels that <code class="language-plaintext highlighter-rouge">check_jvm_memory</code> uses,
or if other versions of Java ever add new areas of memory,
you can configure how they appear in the scriptâ€™s output using the <code class="language-plaintext highlighter-rouge">Label</code> configuration option.</p>

<p>Note that any <code class="language-plaintext highlighter-rouge">Threshold</code>s you have configured need to match the <code class="language-plaintext highlighter-rouge">Label</code>s you set.
Also note that <code class="language-plaintext highlighter-rouge">Label</code>s canâ€™t contain spaces, or else Check MK wonâ€™t be able to parse the scriptâ€™s output.</p>

<!--
### Footnotes

[^1]: Credit goes to <user> for <whatever reasons>.
-->

:ET